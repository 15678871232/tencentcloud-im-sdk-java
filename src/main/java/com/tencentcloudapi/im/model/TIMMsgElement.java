
package com.tencentcloudapi.im.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.tencentcloudapi.im.model.TIMCustomElem;
import com.tencentcloudapi.im.model.TIMFaceElem;
import com.tencentcloudapi.im.model.TIMFileElem;
import com.tencentcloudapi.im.model.TIMImageElem;
import com.tencentcloudapi.im.model.TIMLocationElem;
import com.tencentcloudapi.im.model.TIMSoundElem;
import com.tencentcloudapi.im.model.TIMTextElem;
import com.tencentcloudapi.im.model.TIMVideoFileElem;
import com.tencentcloudapi.im.model.TIMVideoFileElemMsgContent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * TIMMsgElement
 */
@JsonPropertyOrder({
  TIMMsgElement.JSON_PROPERTY_MSG_TYPE,
  TIMMsgElement.JSON_PROPERTY_MSG_CONTENT
})

@JsonIgnoreProperties(
  value = "MsgType", // ignore manually set MsgType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the MsgType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "MsgType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = TIMCustomElem.class, name = "TIMCustomElem"),
  @JsonSubTypes.Type(value = TIMFaceElem.class, name = "TIMFaceElem"),
  @JsonSubTypes.Type(value = TIMFileElem.class, name = "TIMFileElem"),
  @JsonSubTypes.Type(value = TIMImageElem.class, name = "TIMImageElem"),
  @JsonSubTypes.Type(value = TIMLocationElem.class, name = "TIMLocationElem"),
  @JsonSubTypes.Type(value = TIMSoundElem.class, name = "TIMSoundElem"),
  @JsonSubTypes.Type(value = TIMTextElem.class, name = "TIMTextElem"),
  @JsonSubTypes.Type(value = TIMVideoFileElem.class, name = "TIMVideoFileElem"),
})

public class TIMMsgElement {
  public static final String JSON_PROPERTY_MSG_TYPE = "MsgType";
  protected String msgType = "TIMVideoFileElem";

  public static final String JSON_PROPERTY_MSG_CONTENT = "MsgContent";
  private TIMVideoFileElemMsgContent msgContent;

  public TIMMsgElement() { 
  }

  public TIMMsgElement msgType(String msgType) {
    
    this.msgType = msgType;
    return this;
  }

   /**
   * Get msgType
   * @return msgType
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MSG_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMsgType() {
    return msgType;
  }


  @JsonProperty(JSON_PROPERTY_MSG_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMsgType(String msgType) {
    this.msgType = msgType;
  }


  public TIMMsgElement msgContent(TIMVideoFileElemMsgContent msgContent) {
    
    this.msgContent = msgContent;
    return this;
  }

   /**
   * Get msgContent
   * @return msgContent
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MSG_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TIMVideoFileElemMsgContent getMsgContent() {
    return msgContent;
  }


  @JsonProperty(JSON_PROPERTY_MSG_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMsgContent(TIMVideoFileElemMsgContent msgContent) {
    this.msgContent = msgContent;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TIMMsgElement tiMMsgElement = (TIMMsgElement) o;
    return Objects.equals(this.msgType, tiMMsgElement.msgType) &&
        Objects.equals(this.msgContent, tiMMsgElement.msgContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(msgType, msgContent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TIMMsgElement {\n");
    sb.append("    msgType: ").append(toIndentedString(msgType)).append("\n");
    sb.append("    msgContent: ").append(toIndentedString(msgContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

